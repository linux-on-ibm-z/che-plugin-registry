#
# Copyright (c) 2020-2021 Red Hat, Inc.
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#

name: Release Che Plugin Registry

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'release version in format 7.y.z'
        required: true
      forceRecreateTags:
        description: If true, tags will be recreated. Use with caution
        required: false
        default: 'false'

env:
  IMAGE: quay.io/eclipse/che-plugin-registry

jobs:
  release-build-publish:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64,arm64,ppc64le,s390x]
    outputs:
      amd64: ${{ steps.result.outputs.amd64 }}
      arm64: ${{ steps.result.outputs.arm64 }}
      ppc64le: ${{ steps.result.outputs.ppc64le }}
      s390x: ${{ steps.result.outputs.s390x }}
    steps:
      - name: Clone source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
<<<<<<< HEAD
      - name: Check existing tags
        run: |
          set +e
          RECREATE_TAGS=${{ github.event.inputs.forceRecreateTags }}
          VERSION=${{ github.event.inputs.version }}
          EXISTING_TAG=$(git ls-remote --exit-code origin refs/tags/${VERSION})
          if [[ -n ${EXISTING_TAG} ]]; then
            if [[ ${RECREATE_TAGS} == "true" ]]; then
              echo "[INFO] Removing tag for ${VERSION} version. New tag will be recreated during release."
              git push origin :$VERSION
            else
              echo "[ERROR] Cannot proceed with release - tag ${EXISTING_TAG} already exists."
              exit 1
            fi
          else
            echo "[INFO] No existing tags detected for $VERSION"
          fi
=======

      - name: "Set up QEMU"
        uses: docker/setup-qemu-action@v1

      - name: "Set up Docker Buildx ${{ matrix.arch }}"
        uses: docker/setup-buildx-action@v1

>>>>>>> 0ba2a36... Adds multiarch support in GA
      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        name: Cache yarn dependencies
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v2
        name: Cache vsix dependencies
        id: download-unpacked-cache
        with:
          path: | 
            /tmp/che-plugin-registry/download-folder
            /tmp/che-plugin-registry/unpack-folder
          key: download-unpacked-cache-${{ hashFiles('**/che-theia-plugins.yaml') }}
          restore-keys: |
            download-unpacked-cache-

      - name: image-build
        run: |
          docker pull quay.io/eclipse/che-plugin-registry:nightly
          BUILDER=docker SKIP_FORMAT=true SKIP_LINT=true SKIP_TEST=true ./build.sh --tag ${{ github.event.inputs.version }} --platform ${{ matrix.arch }} --buildx

      - id: result
        name: "Build result outputs version"
        if: ${{ success() }}
        run: echo "::set-output name=${{ matrix.arch }}::${{ github.event.inputs.version }}-${{ matrix.arch }}"

  create-manifest:
    needs: release-build-publish
    runs-on: ubuntu-latest
    steps:
      -
        name: "Checkout source code"
        uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - 
        name: Prepare
        id: prep
        run: |
          SHORT_SHA1=$(git rev-parse --short HEAD)
          echo ::set-output name=short_sha1::${SHORT_SHA1}

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      -
        name: "Create and push manifest"
        run: |
          AMD64_VERSION="${{ needs['release-build-publish'].outputs.amd64 }}"
          ARM64_VERSION="${{ needs['release-build-publish'].outputs.arm64 }}"
          PPC64LE_VERSION="${{ needs['release-build-publish'].outputs.ppc64le }}"
          S390X_VERSION="${{ needs['release-build-publish'].outputs.s390x }}"
          if [[ -z "$AMD64_VERSION" || \
              -z "$ARM64_VERSION" || \
              -z "$PPC64LE_VERSION" || \
              -z "$S390X_VERSION" ]]; then
              echo "[!] The job 'release-build-publish' fails on some of the architectures. Can't create complete manifest.";
              exit 1;
          fi
          AMEND=""
          AMEND+=" --amend ${{ env.IMAGE }}:$AMD64_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$ARM64_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$PPC64LE_VERSION";
          AMEND+=" --amend ${{ env.IMAGE }}:$S390X_VERSION";
          docker manifest create ${{ env.IMAGE }}:${{ github.event.inputs.version }} $AMEND
          docker manifest push ${{ env.IMAGE }}:${{ github.event.inputs.version }}
          docker manifest create ${{ env.IMAGE }}:${{ steps.prep.outputs.short_sha1 }} $AMEND
          docker manifest push ${{ env.IMAGE }}:${{ steps.prep.outputs.short_sha1 }}
      -
        id: result
        name: "Manifest result"
        if: ${{ success() }}
        run: echo "Manifest was created and pushed successfully"

  tag-release:
    needs: create-manifest
    runs-on: ubuntu-latest
    steps:
      -
        name: "Checkout source code"
        uses: actions/checkout@v1
        with:
          fetch-depth: 0
      - name: Tag release
        run: |
          git config --global user.name "Mykhailo Kuznietsov"
          git config --global user.email "mkuznets@redhat.com"

          export GITHUB_TOKEN=${{ secrets.CHE_BOT_GITHUB_TOKEN }}

<<<<<<< HEAD
          ./make-release.sh --version ${{ github.event.inputs.version}} --trigger-release
      - name: Create failure MM message
        if: ${{ failure() }}
        run: |
          echo "{\"text\":\":building_construction: Che Plugin Registry ${{ github.event.inputs.version }} release has failed: https://github.com/eclipse/che-plugin-registry/actions/workflows/release.yml\"}" > mattermost.json
      - name: Create success MM message
=======
          ./make-release.sh --version ${{ github.event.inputs.version}} --tag-release
      - name: Create MM message
>>>>>>> 0ba2a36... Adds multiarch support in GA
        run: |
          echo "{\"text\":\":building_construction: Che Plugin Registry ${{ github.event.inputs.version }} has been released: https://quay.io/eclipse/che-plugin-registry:${{ github.event.inputs.version }}\"}" > mattermost.json
      - name: Send MM message
        if: ${{ success() }} || ${{ failure() }}
        uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.MATTERMOST_WEBHOOK_URL }}
          MATTERMOST_CHANNEL: eclipse-che-releases
          MATTERMOST_USERNAME: che-bot
